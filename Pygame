# Import necessary libraries
import pygame
import os
import random
import pygame.mixer
import sys

# Set up the game window dimensions
WIDTH, HEIGHT = 900, 700  # Screen Size
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Coin Catcher!")  # Game Name

# Initialize Pygame
pygame.init()
pygame.font.init()

# Define color constants
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 250, 0)
RED = (250, 0, 0)

# Set frames per second
FPS = 60
VEL = 7  # Velocity

# Define dimensions for game elements
BASKET_WIDTH, BASKET_HEIGHT = 70, 55
COIN_WIDTH, COIN_HEIGHT = 50, 40
HEARTH_WIDTH, HEARTH_HEIGHT = 40, 40

# Load images for game elements
BASKET_IMAGE = pygame.image.load(os.path.join('GAME', 'coin sack.png'))
BASKET_IMAGE = pygame.transform.scale(BASKET_IMAGE, (BASKET_WIDTH, BASKET_HEIGHT))
COIN_IMAGE = pygame.image.load(os.path.join('GAME', 'coin.png'))
COIN_IMAGE = pygame.transform.scale(COIN_IMAGE, (COIN_WIDTH, COIN_HEIGHT))
HEARTH_IMAGE = pygame.image.load(os.path.join('GAME', 'Heart.png'))
HEARTH_IMAGE = pygame.transform.scale(HEARTH_IMAGE, (HEARTH_WIDTH, HEARTH_HEIGHT))

# Initialize Pygame sound mixer
pygame.mixer.init()
coin_sound = pygame.mixer.Sound('GAME/coin sound.mp3')
game_over_sound = pygame.mixer.Sound('GAME/game over.mp3')
pygame.mixer.music.load('GAME/backsound.mp3')
pygame.mixer.music.set_volume(0.5)
pygame.mixer.music.play(-1)

# Load background image
BG = pygame.transform.scale(pygame.image.load(os.path.join('GAME', 'background.png')), (WIDTH, HEIGHT))

# Create a font for buttons
button_font = pygame.font.Font(None, 36)

# Function to draw the start menu with a previous score
def draw_start_menu(previous_score):
    WIN.blit(BG, (0, 0))
    # Create a start button rectangle
    start_button = pygame.Rect(WIDTH // 2 - 75, HEIGHT // 2 - 25, 150, 50)
    pygame.draw.rect(WIN, GREEN, start_button)
    pygame.draw.rect(WIN, BLACK, start_button, 2)
    # Render "START" text on the button
    start_text = button_font.render("START", True, BLACK)
    WIN.blit(start_text, (WIDTH // 2 - start_text.get_width() // 2, HEIGHT // 2 - start_text.get_height() // 2))
    # Render the previous score
    score_text = button_font.render(f"Previous Score: {previous_score}", True, BLACK)
    WIN.blit(score_text, (WIDTH // 2 - score_text.get_width() // 2, HEIGHT // 2 + 50 - score_text.get_height() // 2))
    pygame.display.update()

# Function to draw the game over menu
def draw_game_over_menu():
    WIN.blit(BG, (0, 0))
    # Create buttons for "Play Again," "Exit," and "Menu"
    play_again_button = pygame.Rect(WIDTH // 2 - 75, HEIGHT // 2 - 25, 150, 50)
    exit_button = pygame.Rect(WIDTH // 2 - 75, HEIGHT // 2 + 50, 150, 50)
    menu_button = pygame.Rect(WIDTH // 2 - 75, HEIGHT // 2 + 125, 150, 50)
    pygame.draw.rect(WIN, (0, 255, 0), play_again_button)
    pygame.draw.rect(WIN, (255, 0, 0), exit_button)
    pygame.draw.rect(WIN, (0, 0, 255), menu_button)
    # Render text on the buttons
    play_again_text = button_font.render("Play Again", True, BLACK)
    exit_text = button_font.render("Exit", True, BLACK)
    menu_text = button_font.render("Menu", True, BLACK)
    # Position the text at the center of the buttons
    play_again_text_rect = play_again_text.get_rect(center=play_again_button.center)
    exit_text_rect = exit_text.get_rect(center=exit_button.center)
    menu_text_rect = menu_text.get_rect(center=menu_button.center)
    WIN.blit(play_again_text, play_again_text_rect)
    WIN.blit(exit_text, exit_text_rect)
    WIN.blit(menu_text, menu_text_rect)
    pygame.display.update()

# Function to draw the game window
def draw_window(basket, coins, score, lives):
    WIN.blit(BG, (0, 0))
    WIN.blit(BASKET_IMAGE, (basket.x, basket.y))
    for coin in coins:
        WIN.blit(COIN_IMAGE, (coin.x, coin.y))
    font = pygame.font.Font(None, 36)
    text = font.render(f"Score: {score}", True, BLACK)
    WIN.blit(text, (10, 10))
    for i in range(lives):
        WIN.blit(HEARTH_IMAGE, (WIDTH - 50 - i * 40, 10))
    pygame.display.update()

# Function to handle basket movement
def basket_movement(keys_pressed, basket):
    if keys_pressed[pygame.K_LEFT] and basket.x - VEL > 0:
        basket.x -= VEL + 3
    if keys_pressed[pygame.K_RIGHT] and basket.x - VEL < 830:
        basket.x += VEL + 3

# Main game loop
def game_loop():
    basket = pygame.Rect(400, 650, BASKET_WIDTH, BASKET_HEIGHT)
    coins = []
    coin_spawn_timer = 0
    score = 0
    lives = 3
    clock = pygame.time.Clock()
    run = True
    coin_drop_speed = 4
    points_to_increase_speed = 10
    points_counter = 0

    while run:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        keys_pressed = pygame.key.get_pressed()
        basket_movement(keys_pressed, basket)

        coin_spawn_timer += 1
        if coin_spawn_timer == 60:
            coin_spawn_timer = 0
            new_coin = pygame.Rect(random.randint(0, WIDTH - COIN_WIDTH), 0, COIN_WIDTH, COIN_HEIGHT)
            coins.append(new_coin)

        for coin in coins:
            coin.y += coin_drop_speed
            if coin.colliderect(basket):
                coins.remove(coin)
                score += 1
                points_counter += 1
                coin_sound.play()
                if points_counter % points_to_increase_speed == 0:
                    coin_drop_speed += 2
            elif coin.y >= HEIGHT:
                coins.remove(coin)
                lives -= 1
                if lives == 0:
                    run = False
                    game_over_sound.play()

        coins = [coin for coin in coins if coin.y <= HEIGHT]

        draw_window(basket, coins, score, lives)

    return score

# Function to display the game over menu and handle button clicks
def game_over_menu(previous_score):
    while True:
        draw_game_over_menu()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return True
            if event.type == pygame.MOUSEBUTTONDOWN:
                if pygame.mouse.get_pressed()[0]:
                    x, y = pygame.mouse.get_pos()
                    play_again_button = pygame.Rect(WIDTH // 2 - 75, HEIGHT // 2 - 25, 150, 50)
                    exit_button = pygame.Rect(WIDTH // 2 - 75, HEIGHT // 2 + 50, 150, 50)
                    menu_button = pygame.Rect(WIDTH // 2 - 75, HEIGHT // 2 + 125, 150, 50)

                    if play_again_button.collidepoint(x, y):
                        return False  # Restart the game
                    elif exit_button.collidepoint(x, y):
                        return True  # Exit the game
                    elif menu_button.collidepoint(x, y):
                        return "menu"  # Go back to the menu with the previous score

# Main function to run the game
def main():
    in_start_menu = True
    game_over = False
    player_score = 0

    while True:
        while in_start_menu:
            draw_start_menu(player_score)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    if pygame.mouse.get_pressed()[0]:
                        x, y = pygame.mouse.get_pos()
                        start_button = pygame.Rect(WIDTH // 2 - 75, HEIGHT // 2 - 25, 150, 50)
                        if start_button.collidepoint(x, y):
                            in_start_menu = False

        player_score = game_loop()
        result = game_over_menu(player_score)

        if result == "menu":
            in_start_menu = True
            pygame.time.delay(100)  # Adding a small delay to prevent accidental double clicks
        elif result:
            pygame.quit()
            sys.exit()


if __name__ == "__main__":
    main()
